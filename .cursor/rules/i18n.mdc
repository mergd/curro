---
description: When you're doing translation
globs: 
alwaysApply: false
---
The supported languages are EN, ZH, ES.

For larger blocks of copy on specific pages you don't need to make it i18n compatible - unless told to do so.

Lean into making commonly used components i18n compatible – although you just need to make the en variant for i18n – zh and es can come at a later step.



Import the formatters: formatDate, formatNumber, formatCurrency, formatRelativeTime from src/lib/formatters


## Docs on i18n

Run `pnpm run i18n-coverage` to check the coverage.

Also use your discretion with some hardcoded values/strings - which i18n would be overkill for – i.e. small labels, names of things (e.g. Bitcoin)

Generally, the en.json file is the master, and the other files should be updated to match the en.json file.

## Overview

The i18n auto-sync system automatically:
- Detects missing translation keys in target languages
- Removes extra keys not present in the base locale
- Translates missing keys using AI (OpenRouter API)
- Maintains consistent structure across all translation files

## Setup

### 1. OpenRouter API Key

Get an API key from @OpenRouter:

```bash
# Set environment variable
export OPENROUTER_API_KEY="your-api-key-here"

# Or add to .env file
echo "OPENROUTER_API_KEY=your-api-key-here" >> .env
```

### 2. Choose AI Model (Optional)

By default, the system uses `anthropic/claude-3.5-sonnet`. You can override this:

```bash
export OPENROUTER_MODEL="anthropic/claude-3.5-sonnet"
# or
export OPENROUTER_MODEL="openai/gpt-4o"
# or
export OPENROUTER_MODEL="meta-llama/llama-3.1-70b-instruct"
```

## Usage

### Local Development

```bash
# Check translation differences
pnpm run i18n-diff

# Auto-sync all translation files
pnpm run i18n-sync

# Check what would be synced (dry run)
pnpm run i18n-sync:check
```

### Available Scripts

| Script | Description |
|--------|-------------|
| `i18n-coverage` | Show translation coverage report |
| `i18n-diff` | Show differences between base and target locales |
| `i18n-sync` | Automatically sync all translations |
| `i18n-sync:check` | Preview what would be synced without making changes |

## CI/CD Integration

The system includes GitHub Actions workflows that automatically:

### On Push to Main Branch

When `messages/en.json` is modified:
1. **Detects changes** in the base locale file
2. **Auto-translates** missing keys using OpenRouter API
3. **Commits changes** back to the repository
4. **Pushes updates** to the same branch

### On Pull Requests

For PRs touching translation files:
1. **Validates** translation synchronization
2. **Reports coverage** for each locale
3. **Comments on PR** with sync status and recommendations

### Manual Trigger

You can manually trigger the sync workflow:
1. Go to **Actions** tab in GitHub
2. Select **I18n Auto Sync** workflow
3. Click **Run workflow**
4. Optionally check **Force sync all locales**

## Configuration

### Supported Languages

Currently configured for:
- **English (en)** - Base locale
- **Spanish (es)** - Target locale
- **Chinese (zh)** - Target locale

### Translation Context

The system provides contextual instructions for better translations:

**Spanish:**
- Uses formal "usted" form for UI text
- Keeps technical terms in English where appropriate
- Maintains modern, natural Spanish

**Chinese:**
- Uses simplified Chinese characters
- Concise, modern language for software interfaces
- Appropriate measure words and formal business language

### Batch Processing

- **Batch size:** 10 keys per API call
- **Max retries:** 3 attempts per batch
- **Retry delay:** Exponential backoff (1s, 2s, 3s)

## How It Works

### 1. Delta Analysis

```mermaid
graph TD
    A[Load en.json] --> B[Load target locale]
    B --> C[Flatten objects]
    C --> D[Compare keys]
    D --> E[Identify missing keys]
    D --> F[Identify extra keys]
```

### 2. Translation Process

```mermaid
graph TD
    A[Missing keys] --> B[Group into batches]
    B --> C[Add context hints]
    C --> D[Call OpenRouter API]
    D --> E[Parse JSON response]
    E --> F[Retry on failure]
    F --> G[Merge translations]
```

### 3. File Synchronization

```mermaid
graph TD
    A[Remove extra keys] --> B[Add translated keys]
    B --> C[Unflatten object]
    C --> D[Save to file]
    D --> E[Preserve formatting]
```

## Translation Quality

### Context Awareness

The system automatically detects key patterns and provides context:
- **Auth keys** → "Authentication and login related text"
- **Error keys** → "Error messages for user feedback"  
- **Form keys** → "Form labels and validation messages"
- **Action keys** → "Button labels and action text"

### Placeholder Preservation

All dynamic content is preserved exactly:
- `{name}`, `{amount}`, `{currency}` variables
- HTML entities like `&apos;`
- Formatting and structure

### Consistency Checks

- Same key structure across all locales
- No orphaned or missing keys
- Proper JSON formatting and syntax

## Troubleshooting

### Common Issues

**API Key Not Set:**
```bash
❌ Error: OPENROUTER_API_KEY environment variable is required
```
Solution: Set the API key in your environment or `.env` file.

**Translation Failures:**
```bash
⚠️ Translation attempt 1 failed for batch 1: API error
```
Solution: Check your API key, model availability, and network connection.

**JSON Parse Errors:**
```bash
❌ Failed to parse translation response
```
Solution: The AI model returned invalid JSON. This is retried automatically.

### GitHub Actions Setup

1. **Add Secrets:**
   - Go to repository **Settings → Secrets and variables → Actions**
   - Add `OPENROUTER_API_KEY` as a repository secret

2. **Optional Variables:**
   - Add `OPENROUTER_MODEL` as a repository variable to customize the AI model

3. **Permissions:**
   - Ensure Actions have write permissions to commit changes
   - **Settings → Actions → General → Workflow permissions → Read and write permissions**

## Best Practices

### 1. Review AI Translations

While the AI provides high-quality translations, always review:
- Technical terminology accuracy
- Cultural appropriateness
- Brand voice consistency

### 2. Batch Updates

For large changes to `en.json`:
- Make changes in smaller batches
- Review translations before merging
- Test UI with new translations

### 3. Manual Overrides

You can manually edit translations after auto-sync:
- The system won't overwrite existing keys
- Only missing keys are auto-translated
- Manual translations take precedence

### 4. Version Control

- Translation updates create clear commit messages
- Each locale change is tracked separately
- Easy to revert specific translations if needed

## Cost Estimation